# Generated by Django 2.2.9 on 2020-02-10 10:24

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('roles', models.IntegerField(choices=[(1, 'Admin'), (2, 'Author'), (3, 'Faculty'), (4, 'Learner')])),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Center',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('center_name', models.CharField(max_length=120, unique=True, verbose_name='Center name')),
                ('status', models.BooleanField(default=False, verbose_name='Center status')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Created Date')),
            ],
        ),
        migrations.CreateModel(
            name='Concept',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('concept_name', models.CharField(max_length=20, verbose_name='Concept')),
                ('concept_slug', models.SlugField(editable=False, verbose_name='Concept slug')),
            ],
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_name', models.CharField(max_length=120, verbose_name='Country Name')),
            ],
        ),
        migrations.CreateModel(
            name='Departments',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(max_length=120, verbose_name='Department name')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='created Date')),
            ],
        ),
        migrations.CreateModel(
            name='Designation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('designation', models.CharField(max_length=120, verbose_name='Designation')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Created Date')),
            ],
        ),
        migrations.CreateModel(
            name='Division',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('division', models.CharField(max_length=120, verbose_name='Department name')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='created Date')),
            ],
        ),
        migrations.CreateModel(
            name='EmploymentType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('et_name', models.CharField(max_length=120, verbose_name='Employment Type Name')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Created Date')),
            ],
        ),
        migrations.CreateModel(
            name='Faculties',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('status', models.BooleanField(blank=True, default=False, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='created Date')),
                ('center', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='identity_service.Center')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('region_name', models.CharField(max_length=120, verbose_name='Region Name')),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='identity_service.Country')),
            ],
        ),
        migrations.CreateModel(
            name='Skill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('skill', models.CharField(max_length=120, verbose_name='skill name')),
                ('subject', models.IntegerField(verbose_name='subject')),
                ('subject_name', models.CharField(blank=True, max_length=50, null=True)),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='created Date')),
            ],
        ),
        migrations.CreateModel(
            name='Studentclasspath',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='created Date')),
                ('student', models.IntegerField()),
                ('classId', models.IntegerField()),
                ('current', models.IntegerField(choices=[('0', 'Zero'), ('1', 'One')], default='0')),
            ],
        ),
        migrations.CreateModel(
            name='Studentprefs',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('batch', models.IntegerField()),
                ('session', models.IntegerField()),
                ('phase', models.IntegerField()),
                ('program', models.IntegerField()),
                ('classId', models.IntegerField()),
                ('created_on', models.DateTimeField(verbose_name='created Date')),
            ],
        ),
        migrations.CreateModel(
            name='UserConcepts',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='Created Date')),
                ('concept', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='identity_service.Concept')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='concepts', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserBatch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch', models.BigIntegerField(default=0, verbose_name='User Batch')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='userbatches', to='identity_service.Faculties')),
            ],
        ),
        migrations.CreateModel(
            name='StudentInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120, verbose_name='Student name')),
                ('email', models.EmailField(max_length=254, verbose_name='Student Email')),
                ('phone', models.BigIntegerField(verbose_name='Student Mobile')),
                ('dob', models.DateField()),
                ('gender', models.IntegerField(default=1, verbose_name='Student Gender')),
                ('division', models.IntegerField(default=0, verbose_name='division')),
                ('role_number', models.BigIntegerField(default=0, verbose_name='Student role number')),
                ('phase', models.BigIntegerField(default=0, verbose_name='Phase')),
                ('phase_start_date', models.DateField(verbose_name='Phase start date')),
                ('medium', models.IntegerField(default=0, verbose_name='medium')),
                ('inital_batch', models.IntegerField(verbose_name='inital batch')),
                ('current_batch', models.IntegerField(verbose_name='Current Batch')),
                ('previous_batch', models.IntegerField(verbose_name='Previous Batch')),
                ('student_class', models.IntegerField(verbose_name='Student Class')),
                ('student_program', models.IntegerField(verbose_name='Program')),
                ('session', models.IntegerField(verbose_name='Session')),
                ('center', models.IntegerField(default=0, verbose_name='Center')),
                ('father_name', models.CharField(max_length=120, verbose_name='Father name')),
                ('father_email', models.EmailField(max_length=254, verbose_name='Father name')),
                ('father_mobile', models.BigIntegerField(verbose_name='Father mobile')),
                ('mother_name', models.CharField(max_length=120, verbose_name='Mother name')),
                ('mother_email', models.EmailField(max_length=254, verbose_name='Mother email')),
                ('mother_mobile', models.BigIntegerField(verbose_name='Mother mobile')),
                ('status', models.BooleanField(blank=True, default=False, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='StudentHasSubjects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subject', models.IntegerField(default=0, verbose_name='Subject')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='identity_service.StudentInfo')),
            ],
        ),
        migrations.CreateModel(
            name='State',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state_name', models.CharField(max_length=120, verbose_name='State name')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='identity_service.Region')),
            ],
        ),
        migrations.CreateModel(
            name='Facultyhassubjects',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='created Date')),
                ('subject', models.IntegerField()),
                ('faculty', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='identity_service.Faculties')),
            ],
        ),
        migrations.CreateModel(
            name='EmploymentTypeMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='identity_service.EmploymentType')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='identity_service.Faculties')),
            ],
        ),
        migrations.CreateModel(
            name='DesignationMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('designation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='identity_service.Designation')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='identity_service.Faculties')),
            ],
        ),
        migrations.CreateModel(
            name='DepartmentMapping',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='identity_service.Departments')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='identity_service.Faculties')),
            ],
        ),
        migrations.CreateModel(
            name='Commenttag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.CharField(max_length=50)),
                ('text', models.TextField(blank=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_name', models.CharField(max_length=120, verbose_name='City name')),
                ('state', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='identity_service.State')),
            ],
        ),
        migrations.AddField(
            model_name='center',
            name='city',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='identity_service.City'),
        ),
    ]
